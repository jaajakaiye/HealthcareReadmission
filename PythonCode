# Install missing libraries (if required)
# Uncomment if libraries are not already installed in Colab
# !pip install pandas scikit-learn matplotlib seaborn

# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Step 2: Load your dataset (upload it to Colab or use a sample dataset)
from google.colab import files
uploaded = files.upload()  # Upload your CSV file (e.g., 'patient_data.csv')

# Replace 'patient_data.csv' with your actual file name
data = pd.read_csv('patient_data.csv')

# Step 3: Data preprocessing
# Inspect the dataset
print("Dataset Sample:")
print(data.head())

# Handle missing values (if any)
data.fillna(0, inplace=True)  # Replace missing values with 0 (or use other strategies)

# Encode categorical variables (if applicable)
data = pd.get_dummies(data, drop_first=True)

# Separate features (X) and the target variable (y)
X = data.drop(columns=['readmitted_30days'])  # Replace 'readmitted' with the actual target column
y = data['readmitted_30days']  # Binary target variable (e.g., 0 = No, 1 = Yes)

# Step 4: Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Build and train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Step 6: Evaluate the model
y_pred = model.predict(X_test)

# Accuracy and Classification Report
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Step 7: Feature importance (optional)
feature_importances = pd.Series(model.feature_importances_, index=X.columns)
feature_importances.nlargest(10).plot(kind='barh', color='skyblue')
plt.title("Top 10 Feature Importances")
plt.show()
